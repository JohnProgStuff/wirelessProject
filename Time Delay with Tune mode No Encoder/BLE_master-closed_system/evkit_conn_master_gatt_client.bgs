dim addr(6)
dim result
dim endpoint
dim in(20) # endpoint data in
dim in_len
dim out(20) # endpoint data out
dim gotSaved(20)
dim gotSaved_len
dim out_len
  dim connected 		# BLE connection status (0=disconnected, 1=connected)
  dim advertising 		# advertising status (0=off, 1=on)
  dim io_status(3)    	# port status characteristic local uint8array container 3 bytes stores 3 ports
  dim ipr_result		# container for io_port_read() call's returned "result" value (uint16)
  dim ipr_port			# container for io_port_read() call's returned "port" value (uint8)
  dim ipr_data			# container for io_port_read() call's returned "port" value (uint8) (data? not port?)
  dim last_press        # last time button was pressed.
dim count
dim gpio_delta
dim gotup(5)
dim gotdn(5)
dim gotST(5)
dim gotET(5)
dim noTN(4)
dim tuneMode
dim direction(2) #UP or DN
# variables used by the example script for Flash read/write
dim read(16)
dim data(16)
dim length
dim tuneCount 			# default is 32-bit 4-byte signed integer. 
# COUNTER POSSIBILITIES
# max=127 with a 8 bit signed integer
# max=32,767 with a 16bit signed integer bgscript has 32768 in soft timer 1s interrupt
# max=2,147,483,647 with a 32bit signed integer
#************************************************************************************************************
event system_boot(major, minor, patch, build, ll_version, protocol_version, hw)
		# initialized connected status to disconnected
		connected = 0
		# initialize advertising status as ON (since it will be turned on in slave mode)
		# advertising = 1
	gpio_delta = 0
	io_status(0:1) = 0
	io_status(1:1) = 0
	io_status(2:1) = 0
	count = 0
	gotup(0:5) = "gotup"
	gotdn(0:5) = "gotdn"
	gotST(0:5) = "gotST"
	gotET(0:5) = "gotET"
	noTN(0:4) = "noTN"
	tuneMode = 0 #OFF=0
	tuneCount = 0
	endpoint = system_endpoint_uart1
	################################################
	# Data to write to flash
	#data(0:11) === $ff ff 00 00 ff ff 00 00 ff ff 00
	data(0:2) = "ET"
	data(2:4) = "JOHN"
	data(6:4) = "RUSS"
	data(10:1) = $00
	data(11:5) = "got--"
	# Set all bits to 1 by erasing the first page (page is 2kB)
	# call flash_erase_page(0)
	# Read data from user area and print it
	# read 11 bytes from offset 0
	# Output will be all 0xff's
	# Note: You can only write 1s to 0s on the flash. Flash erase command can be used to turn 0s to 1s.
	#call flash_read_data(0, 11)(length, read(0:11))
	#call system_endpoint_tx(endpoint, 11, read(0:11))
	#call system_endpoint_tx(endpoint, 1, "\n")
	# Offset 0, 11 bytes to write
	# call flash_write_data(0, 11, data(0:11))
	# Read data from user area
	# read 11 bytes from offset 0
	# Output will correspond to data(0:11)
	# call flash_read_data(0, 11)(length, read(0:11))
	# call system_endpoint_tx(endpoint, 11, read(0:11))
	########################################################
    	
	
    call system_endpoint_tx(endpoint, 64, "\n\r** Boot: Connection Master, GATT Client ** Version: et-0.8 **\n")
		# set gap_set_scan_parameters(scan_interval, scan_window, active)
		#call gap_set_scan_parameters(1600, 800, 1)
		call gap_set_scan_parameters(75,50,1) #default
		call gap_set_scan_parameters(75, 70, 1) # 93% duty cycle scanning
		#call gap_set_scan_parameters(8000, 4000, 1) # default
    
	call system_endpoint_tx(endpoint, 13, "\r\ncurrFlash: ")
   	call flash_read_data(0, 16)(length, read(0:16))
    call system_endpoint_tx(endpoint, 16, read(0:16))
		direction(0:2) = read(0:2)
		if direction(0:2) = "ST" then# Write data to user area
			call gap_discover(2) # look for device
			call system_endpoint_tx(endpoint, 10, "\r\nSTresend")
			call hardware_set_soft_timer(32000,0,1) # resend until accepted.
			#call attclient_attribute_write(0, xgatt_data, 2, direction(0:2))
		end if
	
    call system_endpoint_set_watermarks(endpoint, 0, 0) # disable watermarks
    
		# enable INT on P0.0 & P0.1 parameters(port=0, bitmask=0b00000011, edge=rising=0)
		call hardware_io_port_config_irq(1, $38, 0) # $0C is the bitmask for P1.2 P1.3 
		call system_endpoint_tx(system_endpoint_uart1, 29, "\r\n** Boot Event Complete **\r\n")
	call system_endpoint_set_watermarks(endpoint, $ff, 0) # disable TX watermark because we only receive
end

#************************************************************************************************************
#any time it receives a response from a device it runs this event
event gap_scan_response(rssi, packet_type, sender, address_type, bond, data_len, data_data)
		#call system_endpoint_tx(system_endpoint_uart1, 18, "\r\n** Scanning **\r\n")

    if packet_type = 4 && data_data(4:1) = $e5 then
		#call system_endpoint_tx(system_endpoint_uart1, 12, "\n** found **")
	   #call gap_connect_direct(address, addr_type, conn_interval_min, conn_interval_max, timeout, latency)(result, connection_handle)
       #call gap_connect_direct(sender(0:6), 0, 800, 800, 500, 0) # 1000ms connection interval meaning 10B/s
       #call gap_connect_direct(sender(0:6), 0, 80, 80, 500, 0) # 100ms connection interval meaning 100B/s
       call gap_connect_direct(sender(0:6), 0, 6, 6, 500, 0) # 7.5ms connection interval meaning ~1.3KB/s
    end if

end


#************************************************************************************************************
event connection_status(connection, flags, address, address_type, conn_interval, timeout, latency, bonding)
		#check for "new connection established" event
		if (flags & $05) = $05 then	
			connected = 1 # set connection status to Connected
			#call system_endpoint_tx(endpoint, 17, "\n\r Connected=1 \r\n")
		end if
		#check for "encrypted" status (connected+bonded, not used by this IRQ demo)
		if (flags & $02) = $02 then
			call system_endpoint_tx(endpoint, 15, "\n\r Encrypted \r\n")
		end if
    call system_endpoint_tx(endpoint, 17, "\n\r++ Connected ++")
    call system_endpoint_tx(endpoint, 26, "\n\r++ Connection interval: ")	
    call system_endpoint_tx(endpoint, 4, conn_interval)
    call system_endpoint_tx(endpoint, 4, " ++\n")

    call system_endpoint_set_watermarks(endpoint, 1, 0) # set RX watermark
    #call attclient_attribute_write(connection, atthandle, data_len, data_data)(connection, result)
    call attclient_attribute_write(connection, xgatt_data + 1, 1, 2) #xgatt_data+1 
	#xgatt_data+1 will be responded to from slave and attclient_procedure event runs and if it was
end



#************************************************************************************************************
# this event runs when the slave device responds to a master att command
#************************************************************************************************************
event attclient_procedure_completed(connection, results, handle)
        # call system_endpoint_tx(endpoint, 33, "\n\r attc_proc_complete \n\r")
    if (handle = xgatt_data + 1) then # it was xgatt_data + 1 
       #call system_endpoint_tx(endpoint, 43, "\n\r++ Remote CCC set to start indications ++")
       call system_endpoint_tx(endpoint, 46, "\n\r++ Transparent data exchange can start ++\n\n\r")
    end if
    if (handle = xgatt_data) then
		call system_endpoint_tx(endpoint,9,"\r\nxgatt: ")
        call system_endpoint_set_watermarks(endpoint, 1, $ff) # set RX watermark
    end if
end

#************************************************************************************************************
# attclient_attribute_value
#************************************************************************************************************
event attclient_attribute_value(connection, handle, type, value_len, value_data)
      # call system_endpoint_tx(endpoint, 26, "\n\r attclient_att_value \n\n\r") #for debugging
	  # connection for just one connection will be zero.
	#call system_endpoint_tx(endpoint, 4, "\nd: ")
	#call system_endpoint_tx(endpoint, value_len, value_data(0:value_len))
	#call system_endpoint_tx(endpoint, 1, "\n")
    if handle = xgatt_data then # this if is just passing the xgatt_data to the UART. we want to wait for a received confirmation
        out(0:value_len) = value_data(0:value_len) #value_len
        out_len = value_len
		gotSaved(0:value_len) = value_data(0:value_len) #value_len
        gotSaved_len = value_len
		data(11:5) = gotSaved(0:5)
		call flash_erase_page(0)
		call flash_write_data(0, 16, data(0:16))
        call system_endpoint_set_watermarks(endpoint, $ff, out_len) # set TX watermark
		#if out_len > 5 then
		#	call connection_disconnect(0)
		#	call gap_end_procedure() #this will end the discover process when master has received a confirmation.
		#end if
		#call system_endpoint_tx(endpoint, 1, "\n")
		call hardware_set_soft_timer(0, 0, 0) # time=0 ends timer
		call hardware_set_soft_timer(32000, 1, 1) # time=0 ends timer
			
		if (out(0:5) = "gotUP") then ##### gotup ######
			#call connection_disconnect(0)
			#call gap_end_procedure() #this will end the discover process
			count = 0
			noTN(0:4) = "uptn"
			#call hardware_set_soft_timer(0, 0, 0) # time=0 ends timer
			#call hardware_set_soft_timer(10000, 1, 0) # time=0 ends timer
			#call connection_disconnect(0)
		end if
		if out(0:5) = "gotDN" then ##### gotdn ######
			count = 0
			noTN(0:4) = "dnnt"
			#call hardware_set_soft_timer(0, 0, 0) # time=0 ends timer			
			#call hardware_set_soft_timer(10000, 1, 0) # time=0 ends timer
			#call connection_disconnect(0)
			#call gap_end_procedure() #this will end the discover process when master has received a confirmation.
		end if
    end if
		# we want to disconnect if the server sends back any of the following "gotUP, gotDN, noTN"
		# MCU will stay awake if it is in tune mode and could just get a TNup or TNdn back
		# noTN or noTune stands for exit Tune mode. This will allow MCU to sleep and continue as normal.
		#if value_data(0:value_len) = "gotup"
		#	call connection_disconnect(0)
		#	call gap_end_procedure() #this will end the discover process when master has received a confirmation.
		#end if	
		#if value_data = "gotdn"
		#	call connection_disconnect(0)
		#	call gap_end_procedure() #this will end the discover process when master has received a confirmation.
		#end if	
		#if value_data = "noTN" # end the tuning mode.
		#	call connection_disconnect(0)
		#	call gap_end_procedure() #this will end the discover process when master has received a confirmation.
		#end if	
end


 #dim MAX_CHECKS
 #dim Debounced_state
 #dim State#(4) # make state array the depth of MAX_CHECKS
 #dim Index #pointer into State 
#************************************************************************************************************
# timer interrupt routine
#************************************************************************************************************
event hardware_soft_timer(handle)
	#call_hardware_io_port_read(port, mask)(result, port, data)
	#if handle = 1 then its button 1
	#end if
	#MAX_CHECKS = 8
	# handle 0 = UP
	# handle 1 = DN
	# handle 2 = Tune
	if handle = 0 then #resend the shift command until it is received.
		if 1 then
			call system_endpoint_tx(endpoint, 8, "\r\nsend: ")   
			call system_endpoint_tx(endpoint, 2, direction(0:2))   
			call attclient_attribute_write(0, xgatt_data, 2, direction(0:2))
			####call hardware_set_soft_timer(20000, 0, 1) comment out to only send the command once
		end if
	end if
	if handle = 1 then # keep awake timeout timer.
		if tuneMode = 1 then
			count = 0
			if tuneCount > 59 then #tuneMode has timed out. End it.
				tuneCount = 0
				call hardware_set_soft_timer(0, 1, 1) #end timer for handle 1
				tuneMode = 0
				direction(0:2) = "ET"
				data(0:2) = "ET"
					call system_endpoint_tx(endpoint, 16, "\r\nsendET")   # out_len
					call flash_erase_page(0)
					call flash_write_data(0, 16, data(0:16))
				call hardware_set_soft_timer(10000, 0, 1) #end timer for handle 1
			else
				tuneCount = tuneCount + 1
				call system_endpoint_tx(endpoint, 9, "\r\ntuneCount+1")
			    call hardware_set_soft_timer(32767, 1, 1) #end timer for handle 1
			end if
		else #tuneMode is off
			if count > 9 then
				count = 0
				call hardware_set_soft_timer(0, 1, 1) #end timer for handle 1
				call system_endpoint_tx(endpoint, 16, "\r\ncallDisconnect")   # out_len
			    call connection_disconnect(0)
			else
				count = count + 1
			    call system_endpoint_tx(endpoint, 9, "\r\ncount+1")
			    call hardware_set_soft_timer(32767, 1, 1) #end timer for handle 1
			end if
		end if
        #----------------------------------------------------------
		# if count > 9  then # 30 seconds
			# count = 0
			# call hardware_set_soft_timer(0, 1, 1) #end timer for handle 1
			# if tuneMode = 1 then
				# #tuneMode = 0
				# #direction(0:2) = "ET"
				# #data(0:2) = "ET"
				# #	call system_endpoint_tx(endpoint, 16, "\r\nsendET")   # out_len
				# #	call flash_erase_page(0)
				# #	call flash_write_data(0, 11, data(0:11))
				# call hardware_set_soft_timer(10000, 2, 1) #end timer for handle 1
			# else
				# call system_endpoint_tx(endpoint, 16, "\r\ncallDisconnect")   # out_len
			    # call connection_disconnect(0)
			# end if

		# else
			# call system_endpoint_tx(endpoint, 9, "\r\ncount+1")
			# count = count + 1
			# tuneCount = tuneCount + 1
			# call hardware_set_soft_timer(32000, 1, 1) #end timer for handle 1
		# end if
	end if
	if handle = 2 then 
		# tuneCount = tuneCount + 1
		# if tuneCount > 9  then # 30 seconds
			# tuneCount = 0
			# call hardware_set_soft_timer(0, 2, 1) #end timer for handle 1
			# if tuneMode = 1 then
				# tuneMode = 0
				# direction(0:2) = "ET"
				# data(0:2) = "ET"
					# call system_endpoint_tx(endpoint, 16, "\r\nsendET")   # out_len
					# call flash_erase_page(0)
					# call flash_write_data(0, 11, data(0:11))
				# call hardware_set_soft_timer(10000, 0, 1) #end timer for handle 1
			# else
				# call system_endpoint_tx(endpoint, 16, "\r\ncallDisconnect")   # out_len
			    # call connection_disconnect(0)
			# end if

		# else
			# call system_endpoint_tx(endpoint, 9, "\r\ncount+1")
			# count = count + 1
			# call hardware_set_soft_timer(32000, 2, 1) #end timer for handle 1
		# end if
	end if
	
end

dim saved1
dim k
dim down

#************************************************************************************************************
# hardware io port status
#************************************************************************************************************
event hardware_io_port_status(timestamp, port, irq, state)
	#call system_endpoint_tx(system_endpoint_uart1, 8, "\n Int \r\n")
	#call system_endpoint_tx(system_endpoint_uart1, 10, delta) # try to print the time stamp of the timer
	#call hardware_set_soft_timer(time, handle, single_shot)(result)
	call hardware_set_soft_timer(0,0,1)
	call hardware_set_soft_timer(0,1,1)
	#call hardware_set_soft_timer(0,0,0) # MIGHT NOT NEED
	#call hardware_set_soft_timer(0,1,0) # MIGHT NOT NEED
	
	# THINK ABOUT MAKING THE IF CONNECTED A WHILE LOOP INSTEAD. THIS WAY IT MIGHT STAY 
	# THERE UNTIL THE GAP DISCOVER PROCEDURE COMES BACK AND IT CONNECTS. HOWEVER THIS MIGHT 
	# SCREW THINGS UP.
	if connected = 0 then
		call gap_discover(2) # look for device
	end if
	# only accept this press if it's more then 100ms after the last one (32768 = 1 sec)
    if (timestamp - gpio_delta) > 10277 then #was 3277
	#if(timestamp - gpio_delta) >= 5000 || (gpio_delta < gpio_delta && ($7FFFFFFF - gpio_delta + timestamp) > 5000) then
		gpio_delta = timestamp
		#count = count + 1
		saved1 = 0
		#call hardware_set_soft_timer(1000, 0, 1)
		if port = 1 then
			if (irq & $08) = $08 then # & down = 0 then	
				direction(0:2) = "UP"
				#P1_2 is HIGH and the source of this interrupt
				call system_endpoint_tx(system_endpoint_uart1, 7, "\r\nP1_3 ")
				call attclient_attribute_write(0, xgatt_data, 2, "UP")
				#call hardware_set_soft_timer(time, handle, single_shot)(result)
				call hardware_set_soft_timer(15000, 0, 0) # single_shot runs 0-repeating, 1 -once
			#	down = 1
			#else
			#	down = 0
			end if
			if (irq & $10) = $10 then #& down = 0 then	
				#P1_3 is HIGH and the source of this interrupt
				direction(0:2) = "DN"
				call system_endpoint_tx(system_endpoint_uart1, 8, "\r\nP1__4 ")
				call attclient_attribute_write(0, xgatt_data, 2, "DN")
				call hardware_set_soft_timer(15000, 0, 0) # single_shot runs 0-repeating, 1 -once
				#down = 1
			#else
			#	down = 0
			end if
			if (irq & $20) = $20 then
				call system_endpoint_tx(endpoint, 13, "\r\ncurrFlash: ")
				call flash_read_data(0, 11)(length, read(0:11))
				call system_endpoint_tx(endpoint, 2, read(0:2))
				if read(0:2) = "ST" then
					tuneMode = 1
					
				end if
				if (tuneMode = 1) then #if tuneMode is on then End Tune else Start Tune
					direction(0:2) = "ET"   #Start Tune
					tuneMode = 0
					data(0:2) = "ET"
					call flash_erase_page(0)
					call flash_write_data(0, 11, data(0:11))
				else
					direction(0:2) = "ST"   #Start Tune
					tuneMode = 1
					data(0:2) = "ST"
					call flash_erase_page(0)
					call flash_write_data(0, 11, data(0:11))
				end if
				call system_endpoint_tx(endpoint, 12, "\r\nNewFlash: ")
				call flash_read_data(0, 11)(length, read(0:11))
				call system_endpoint_tx(endpoint, 2, read(0:2))
				
			    call system_endpoint_tx(system_endpoint_uart1, 8, "\r\nP1__5 ")
				call attclient_attribute_write(0, xgatt_data, 2, direction(0:2))
				#call attclient_attribute_write(0, xgatt_data, 2, "ST") #start Tune
				call hardware_set_soft_timer(20000, 0, 1) # single_shot runs 0-repeating, 1 -once
				
			end if
			
			# store state of Port 0 now, since we already have it
			io_status(0:1) = state
				#call system_endpoint_tx(system_endpoint_uart1, 5, state)
				#call system_endpoint_tx(system_endpoint_uart1, 1, "\n")

			# read state of Port 1
			#i = 0
			#while(i < 5)
				call hardware_io_port_read(1, $04)(ipr_result, ipr_port, ipr_data)
				#call system_endpoint_tx(system_endpoint_uart1, 4, ipr_data)
				
			#	saved1 = ipr_data ^ (saved1 << 1)
				#call system_endpoint_tx(system_endpoint_uart1, 1, saved1)
				#call system_endpoint_tx(system_endpoint_uart1, 2, " \n")
				#i = i + 1
				io_status(1:1) = ipr_data
			#end while
			#i=0
			#k=saved1
			#while(i < 8)
				#k = (k >> i) ^ 30
				#call system_endpoint_tx(system_endpoint_uart1, 1, )
				
			#	i = i + 1
			#end while	
			# state of Port 2 read later, since we have to do it in either interrupt case
			# read state of Port 2
			call hardware_io_port_read(2, $ff)(ipr_result, ipr_port, ipr_data)
			io_status(2:1) = ipr_data
		
		end if
		#if port = 1 then
#		if (irq & 64) = 64 then	
#			#P1_6 is HIGH and the source of this interrupt
#			call system_endpoint_tx(system_endpoint_uart1, 14, "P1_6 pressed\r\n")
#		
#			#toggle advertising mode for run
#			if advertising = 0 then
#				# was off, so turn it on
#				call gap_set_mode(gap_general_discoverable, gap_undirected_connectable)
#				advertising = 1
#			else
#				# was on, so turn it off
#				call gap_set_mode(gap_non_discoverable, gap_non_connectable)
#				advertising = 0
#			end if
#		end if
		
			# read state of Port 0
			#call hardware_io_port_read(0,$ff)(ipr_result, ipr_port, ipr_data)
			#io_status(0:1) = ipr_data
			
			# store state of Port 1 now, since we already have it
			#io_status(1:1) = state
			
			# state of Port 2 read later, since we have to do it in either interrupt case
		#end if
		
		# read state of Port 2
		#call hardware_io_port_read(2, $ff)(ipr_result, ipr_port, ipr_data)
		#io_status(2:1) = ipr_data
		
		# update characteristic value in gatt file(will push data if client has subscribed to notifications/indications)
		# call attributes_write(c_gpio_status, 0, 3, io_status(0:3))
	end if	
	### I need a disconnect call here. before the interrupt ends so device will go to sleep ###############
	### having the disconnect and end procedure lines below doesn't allow the device time to connect. #####
	#call connection_disconnect(0)
	#call gap_end_procedure() #this will end the discover process
end
	

#************************************************************************************************************
# when the system receives something over the UART RX it will flag the RX watermark and this event will run
#      this event passes
event system_endpoint_watermark_rx(curr_endpoint, size)
		
        in_len = size
        if in_len > 20 then
            in_len = 20
        end if
			# enable the following line only if mcu isn't echoing back as well.
			call system_endpoint_tx(endpoint, in_len, in(0:in_len)) # echo back to terminal for debugging
		call system_endpoint_set_watermarks(endpoint, 0, $ff) # disable RX watermark 'clear the RX flag'
		call system_endpoint_rx(endpoint, in_len)(result, in_len, in(0:in_len))
		# att write(connection, atthandle, data_len, data_data)
        call attclient_attribute_write(0, xgatt_data, in_len, in(0:in_len)) # send the uart data through BLE
    
end

#************************************************************************************************************
event system_endpoint_watermark_tx(curr_endpoint, size)
    if curr_endpoint = endpoint then
        call system_endpoint_set_watermarks(endpoint, $ff, 0) # disable TX watermark
        call system_endpoint_tx(endpoint, out_len, out(0:out_len))#out_len
		#call system_endpoint_tx(endpoint, 2, out_len)
		#call system_endpoint_tx(endpoint, 5, gotup(0:5))
		
		#if out(0:out_len) = gotup(0:out_len)
		#	call connection_disconnect(0)
		#	call gap_end_procedure() #this will end the discover process when master has received a confirmation.
		#end if
		call attclient_indicate_confirm(0)

    end if
end

#************************************************************************************************************
event connection_disconnected(conn, reas)
		connected = 0 #set connection status to disconnected
		call system_endpoint_tx(endpoint, 9, "\r\nFlash: ")
    	call flash_read_data(0, 11)(length, read(0:11))
        call system_endpoint_tx(endpoint, 2, read(0:2))
    call system_endpoint_tx(endpoint, 22, "\n\r-- Disconnected --\n")
		call system_endpoint_tx(endpoint, 9, "\r\nFlash: ")
    	call flash_read_data(0, 11)(length, read(0:11))
        call system_endpoint_tx(endpoint, 2, read(0:2))
    call system_endpoint_tx(endpoint, 17, "\r-- Reason code: ")
    call system_endpoint_tx(endpoint, 2, reas)
    call system_endpoint_tx(endpoint, 4, " --\n")

    call system_endpoint_set_watermarks(endpoint, 0, 0) # disable watermarks
    #call gap_set_scan_parameters(scan_interval, scan_window, active)(result)
    #call gap_set_scan_parameters(1600, 800, 1)
    #call gap_discover(2)
    call gap_end_procedure() #this will end the discover process

end
